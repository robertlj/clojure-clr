<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Mono Condition="'$(OS)' != 'Windows_NT'">true</Mono>
	
	<TestTargetFramework Condition=" '$(TestTargetFramework)' == '' ">netcoreapp3.1</TestTargetFramework>
	<TestLibraryFramework Condition=" '$(TestTargetFramework)' == 'netcoreapp3.1' ">netstandard2.1</TestLibraryFramework>
	<TestLibraryFramework Condition=" '$(TestTargetFramework)' != 'netcoreapp3.1' ">$(TestTargetFramework)</TestLibraryFramework>
	
	<RootDir>$(MSBuildThisFileDirectory)</RootDir>
	<Solution>$(RootDir)Clojure.sln</Solution>
	
	<BuildSysDir>$(RootDir)Build</BuildSysDir>
	<TestDir>$(RootDir)Test\$(Configuration)\$(TestTargetFramework)</TestDir>
	<ClojureMainBinDir>$(RootDir)Clojure.Main\bin\$(Configuration)\$(TestTargetFramework)</ClojureMainBinDir>
	<ClojureCompileBinDir>$(RootDir)Clojure.Compile\bin\$(Configuration)\$(TestTargetFramework)</ClojureCompileBinDir>
	<ClojureSourceBinDir>$(RootDir)Clojure.Source\bin\$(Configuration)\$(TestLibraryFramework)</ClojureSourceBinDir>
	<ClojureTestsBinDir>$(RootDir)Clojure.Tests\bin\$(Configuration)\$(TestLibraryFramework)</ClojureTestsBinDir>
	
	<StageDir>$(RootDir)Stage\</StageDir>
	
  </PropertyGroup>
  
  <PropertyGroup>
	<ClojureCLRBuildDir>$(MSBuildThisFileDirectory)\Build</ClojureCLRBuildDir>
    <PublicKey>$(ClojureCLRBuildDir)\Key.snk</PublicKey>
  </PropertyGroup>

  <Import Project="$(BuildSysDir)\Tasks.targets" />
  <Import Project="$(RootDir)CurrentVersion.props" />

  <PropertyGroup>
  
    <cljc>Clojure.Compile.exe</cljc>
    <clji>Clojure.Main.exe</clji>

    <DirectLinking Condition=" '$(DirectLinking)' == '' ">true</DirectLinking>

    <Runtime Condition=" '$(Runtime)' == '' ">.Net</Runtime>
	<PlatformSym Condition=" '$(Runtime)' == 'Mono' ">MONO</PlatformSym>
	<PlatformSym Condition=" '$(Runtime)' == '.Net' ">DOTNET</PlatformSym>

  </PropertyGroup>
	
  <Target Name="ListParams">
  	<Message Text="RootDir = $(RootDir)" />
	<Message Text="Solution = $(Solution)" />
	<Message Text="BuildSysDir = $(BuildSysDir)" />
    <Message Text="TestTargetFramework = $(TestTargetFramework)" />
	<Message Text="TestLibraryFramework = $(TestLibraryFramework)" />
	
	<Message Text="Configuration = $(Configuration)" />
	<Message Text="Mono = $(Mono)" />

	<Message Text="TestDir = $(TestDir)" />
	<Message Text="ClojureCompileBinDir = $(ClojureCompileBinDir)" />
	<Message Text="ClojureMainBinDir = $(ClojureMainBinDir)" />
	<Message Text="ClojureSourceBinDir = $(ClojureSourceBinDir)" />
	<Message Text="ClojureTestsBinDir = $(ClojureTestsBinDir)" />
	<Message Text="DirectLinking = $(DirectLinking)" />
	<Message Text="PlatformSym = $(PlatformSym)" />
	<Message Text="StageDir = $(StageDir)" />
	<Message Text="ClojureCLRBuildDir = $(ClojureCLRBuildDir)" />
	<Message Text="PublicKey = $(PublicKey)" />
  </Target>
  
  
  <Target Name="RestoreReferences">
    <MSBuild Projects="$(Solution)" Targets="Restore" />
  </Target>
 
   <PropertyGroup>
	<BuildProperties>
	  RootDir=$(RootDir);
	  Configuration=$(Configuration);
	  Runtime=$(Runtime);
	  PlatformSym=$(PlatformSym);
	  DirectLinking=$(DirectLinking);
	  Mono=$(Mono)	  
	</BuildProperties>
   </PropertyGroup>
 
   <Target Name="Build" DependsOnTargets="RestoreReferences">
    <MSBuild Projects="$(Solution)"
			 Targets="Build"
             Properties="$(BuildProperties)"/>
  </Target>
  
   <Target Name="Rebuild" DependsOnTargets="RestoreReferences">
    <MSBuild Projects="$(Solution)"
			 Targets="Rebuild"
             Properties="$(BuildProperties)"/>
  </Target>
  
    <Target Name="Clean" DependsOnTargets="RestoreReferences">
    <MSBuild Projects="$(Solution)"
			 Targets="Clean"
             Properties="$(BuildProperties)"/>
  </Target> 
  

  <Target Name="StageTest">
    <ItemGroup>
		<ClojureCompileAssets Include="$(ClojureCompileBinDir)\**\*" />
		<ClojureMainAssets Include="$(ClojureMainBinDir)\Clojure.Main.*" />
		<ClojureTestsAssets Include="$(ClojureTestsBinDir)\**\*" />
	</ItemGroup>	
	<Copy SkipUnchangedFiles="true"
		  SourceFiles="@(ClojureCompileAssets)"
		  DestinationFolder="$(TestDir)\%(RecursiveDir)" />
		<Copy SkipUnchangedFiles="true"
		  SourceFiles="@(ClojureMainAssets)"
		  DestinationFolder="$(TestDir)\%(RecursiveDir)" />	  
		<Copy SkipUnchangedFiles="true"
		  SourceFiles="@(ClojureTestsAssets)"
		  DestinationFolder="$(TestDir)\%(RecursiveDir)" />	  
  </Target>  
  
  <Target Name="CompileTest" DependsOnTargets="StageTest" Condition="'$(TestTargetFramework)' == 'net461'">
    <Exec Command="$(cljc) clojure.test-clojure.genclass.examples clojure.test-clojure.protocols.examples clojure.test-clojure.attributes clojure.test-clojure.compilation.load-ns clojure.test-clojure.compilation.line-number-examples" 
          WorkingDirectory="$(TestDir)"
           Condition=" '$(Runtime)' == '.Net' "/>
    <Exec Command="mono $(cljc) clojure.test-clojure.genclass.examples clojure.test-clojure.protocols.examples clojure.test-clojure.attributes  clojure.test-clojure.compilation.load-ns clojure.test-clojure.compilation.line-number-examples" 
          WorkingDirectory="$(TestDir)"
           Condition=" '$(Runtime)' == 'Mono' "/>
  </Target>
  
  

  
  <Target Name="Test" DependsOnTargets="StageTest;CompileTest">
    <Copy SkipUnchangedFiles="true" SourceFiles="Clojure.Tests\clojure\run_test.clj" DestinationFolder="$(TestDir)" />
    <SetEnvironmentVariable Condition="'$(TestTargetFramework)' == 'net461'"
							Name="clojure.test-clojure.exclude-namespaces" 
							Value="#{clojure.test-clojure.compilation.load-ns}" />
	<SetEnvironmentVariable Condition="'$(TestTargetFramework)' == 'netcoreapp3.1'"
							Name="clojure.test-clojure.exclude-namespaces" 
							Value="#{clojure.test-clojure.compilation.load-ns clojure.test-clojure.attributes clojure.test-clojure.compilation clojure.test-clojure.genclass}" />						
    <Exec Command="$(clji) run_test.clj"
          WorkingDirectory="$(TestDir)"
           Condition=" '$(Runtime)' == '.Net' "/>
    <Exec Command="mono $(clji) run_test.clj"
          WorkingDirectory="$(TestDir)"
           Condition=" '$(Runtime)' == 'Mono' "/>
  </Target>

  <Target Name="TestGen" DependsOnTargets="Build;CompileTest">
    <Copy SkipUnchangedFiles="true" SourceFiles="Clojure.Tests\clojure\run_test_generative.clj" DestinationFolder="$(TestDir)" />
	<SetEnvironmentVariable Condition="'$(TestTargetFramework)' == 'netcoreapp3.1'"
							Name="clojure.test-clojure.exclude-namespaces" 
							Value="#{clojure.test-clojure.compilation.load-ns clojure.test-clojure.attributes clojure.test-clojure.compilation clojure.test-clojure.genclass}" />						
    <Exec Command="$(clji) run_test_generative.clj"
          WorkingDirectory="$(TestDir)"
           Condition=" '$(Runtime)' == '.Net' "/>
    <Exec Command="mono $(clji)run_test_generative.clj"
          WorkingDirectory="$(TestDir)"
           Condition=" '$(Runtime)' == 'Mono' "/>
  </Target>


 <!--  Need to update whenever more DLLs are added to basic build -->
    <Target Name="Ilmerge" DependsOnTargets="Build" Condition="'$(TestTargetFramework)' == 'net461'">
    <MakeDir Directories="$(StageDir)\ilmerge\$(TestTargetFramework)" /> 
    <Exec WorkingDirectory="$(ClojureCompileBinDir)" 
          Command="ilmerge /keyfile:$(PublicKey) /out:$(StageDir)\ilmerge\$(TestTargetFramework)\Clojure.dll Clojure.dll clojure.clr.io.clj.dll clojure.clr.shell.clj.dll clojure.core.clj.dll clojure.core.protocols.clj.dll clojure.core.reducers.clj.dll clojure.core.server.clj.dll clojure.core_clr.clj.dll clojure.core_deftype.clj.dll clojure.core_print.clj.dll clojure.core_proxy.clj.dll clojure.data.clj.dll clojure.edn.clj.dll clojure.genclass.clj.dll clojure.gvec.clj.dll clojure.instant.clj.dll clojure.main.clj.dll clojure.pprint.clj.dll clojure.pprint.cl_format.clj.dll clojure.pprint.column_writer.clj.dll clojure.pprint.dispatch.clj.dll clojure.pprint.pprint_base.clj.dll clojure.pprint.pretty_writer.clj.dll clojure.pprint.print_table.clj.dll clojure.pprint.utilities.clj.dll clojure.reflect.clj.dll clojure.reflect.clr.clj.dll clojure.repl.clj.dll clojure.set.clj.dll clojure.stacktrace.clj.dll clojure.string.clj.dll clojure.template.clj.dll clojure.test.clj.dll clojure.test.junit.clj.dll clojure.test.tap.clj.dll clojure.uuid.clj.dll clojure.walk.clj.dll clojure.zip.clj.dll clojure.datafy.clj.dll"
          />

  </Target>
  

  <!-- RJ: Reworked Dist target to work around Mono bug related to embeding ItemGroup inside a Target tag -->
  <Target Name="Dist" DependsOnTargets="Build">
      <!--DLR, Clojure dlls and exes-->
      <CreateItem
      Include="$(OutputPath)\Clojure.*;$(OutputPath)\Microsoft.*" 
      Exclude="$(OutputPath)\Clojure.Tests.dll;$(OutputPath)\Clojure.Tests.pdb;
               $(OutputPath)\Clojure.Source.dll;$(OutputPath)\Clojure.Source.pdb;
               $(OutputPath)\clojure.test-clojure.genclass.examples.ExampleClass.dll;
               $(OutputPath)\clojure.test-clojure.genclass.examples.ExampleClass.pdb;
               $(OutputPath)\Clojure.Main.vshost.exe;$(OutputPath)\Clojure.Main.vshost.exe.manifest">
      <Output
            TaskParameter="Include"
            ItemName="Dlls"/>
     </CreateItem>
      <!--clj and AOT clj files-->
    <CreateItem
       Include="$(OutputPath)\clojure\**\*"
       Exclude="$(OutputPath)\clojure\test_clojure\**\*">
     <Output
       TaskParameter="Include"
       ItemName="CljFiles"/>
     </CreateItem>
    <Copy SourceFiles="@(Dlls)" DestinationFolder="..\dist\$(Configuration)" SkipUnchangedFiles="true" />
    <Copy SourceFiles="@(CljFiles)" DestinationFolder="..\dist\$(Configuration)\clojure\%(RecursiveDir)" SkipUnchangedFiles="true" />
  </Target>
  


  
</Project>
